{"version":3,"sources":["App.jsx","index.jsx"],"names":["SORT_FIELD_ALPHABET","SORT_FIELD_LENGTH","REVERS_FIELDS","goodsFromServer","App","useState","sortMethod","setSortMethod","sortDirection","setSortDirection","visibleGoods","goods","preperedGoods","sort","good1","good2","localeCompare","length","reverse","getPreperedGoods","className","type","classNames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"iPAMMA,EAAsB,KACtBC,EAAoB,SACpBC,EAAgB,SAETC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UA4BK,IAAMC,EAAM,WACjB,MAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA0CF,mBAAS,IAAnD,mBAAOG,EAAP,KAAsBC,EAAtB,KACMC,EA5BR,SAA0BC,EAAOL,EAAYE,GAC3C,IAAMI,EAAa,YAAOD,GAqB1B,OAnBIL,GACFM,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQT,GACN,KAAKN,EACH,OAAOc,EAAME,cAAcD,GAE7B,KAAKd,EACH,OAAOa,EAAMG,OAASF,EAAME,OAE9B,QACE,OAAO,MAKXT,GACFI,EAAcM,UAGTN,EAMcO,CACnBhB,EACAG,EACAE,GAGF,OACE,sBAAKY,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UACEE,IAAW,iBAAkB,CAC3B,WAAYhB,IAAeN,IAG/BuB,QACE,WACEhB,EAAcP,IATpB,iCAgBA,wBACEqB,KAAK,SACLD,UACEE,IAAW,oBAAqB,CAC9B,WAAYhB,IAAeL,IAG/BsB,QACE,WACEhB,EAAcN,IATpB,4BAgBA,wBACEoB,KAAK,SACLD,UACEE,IAAW,oBAAqB,CAC9B,WAAYd,IAAkBN,IAGlCqB,QACE,WACEd,EAAmC,KAAlBD,EAAuBN,EAAgB,KAT9D,qBAgBA,wBACEmB,KAAK,SACLD,UAAU,4BACVG,QACE,WACEhB,EAAc,KALpB,sBAaF,6BACGG,EAAac,KAAI,SAAAC,GAAI,OACpB,oBAEE,UAAQ,OAFV,SAIGA,GAHIA,YCzHjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.b8c318ea.chunk.js","sourcesContent":["import { useState } from 'react';\nimport classNames from 'classnames';\n\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nconst SORT_FIELD_ALPHABET = 'ab';\nconst SORT_FIELD_LENGTH = 'length';\nconst REVERS_FIELDS = 'fields';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nfunction getPreperedGoods(goods, sortMethod, sortDirection) {\n  const preperedGoods = [...goods];\n\n  if (sortMethod) {\n    preperedGoods.sort((good1, good2) => {\n      switch (sortMethod) {\n        case SORT_FIELD_ALPHABET:\n          return good1.localeCompare(good2);\n\n        case SORT_FIELD_LENGTH:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (sortDirection) {\n    preperedGoods.reverse();\n  }\n\n  return preperedGoods;\n}\n\nexport const App = () => {\n  const [sortMethod, setSortMethod] = useState('');\n  const [sortDirection, setSortDirection] = useState('');\n  const visibleGoods = getPreperedGoods(\n    goodsFromServer,\n    sortMethod,\n    sortDirection,\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={\n            classNames('button is-info', {\n              'is-light': sortMethod !== SORT_FIELD_ALPHABET,\n            })\n          }\n          onClick={\n            () => {\n              setSortMethod(SORT_FIELD_ALPHABET);\n            }\n          }\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={\n            classNames('button is-success', {\n              'is-light': sortMethod !== SORT_FIELD_LENGTH,\n            })\n          }\n          onClick={\n            () => {\n              setSortMethod(SORT_FIELD_LENGTH);\n            }\n          }\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={\n            classNames('button is-warning', {\n              'is-light': sortDirection !== REVERS_FIELDS,\n            })\n          }\n          onClick={\n            () => {\n              setSortDirection(sortDirection === '' ? REVERS_FIELDS : '');\n            }\n          }\n        >\n          Reverse\n        </button>\n\n        <button\n          type=\"button\"\n          className=\"button is-danger is-light\"\n          onClick={\n            () => {\n              setSortMethod('');\n            }\n          }\n        >\n          Reset\n        </button>\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li\n            key={good}\n            data-cy=\"Good\"\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}